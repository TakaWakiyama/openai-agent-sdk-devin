import os
import re
import subprocess
import shutil
import time
from flask import Flask, request, jsonify
from slack_sdk.web import WebClient
from slack_sdk.signature import SignatureVerifier
import requests

# 環境変数からトークン類を取得
SLACK_BOT_TOKEN = os.environ["SLACK_BOT_TOKEN"]
SLACK_SIGNING_SECRET = os.environ["SLACK_SIGNING_SECRET"]
OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]
GITHUB_TOKEN = os.environ["GITHUB_TOKEN"]

# Slackクライアントおよび署名検証器を初期化
slack_client = WebClient(token=SLACK_BOT_TOKEN)
signing_verifier = SignatureVerifier(SLACK_SIGNING_SECRET)

app = Flask(__name__)

def parse_mention_text(text):
    repo = None
    m = re.search(r'repo:([\w\-\/]+)', text)
    if m:
        repo = m.group(1)
    cleaned = re.sub(r'<@[A-Z0-9]+>', '', text).strip()
    if repo:
        cleaned = cleaned.replace(f"repo:{repo}", "").strip()
    instruction = cleaned
    return repo, instruction

def process_mention(text):
    repo, instruction = parse_mention_text(text)
    if not repo or not instruction:
        return None
    work_dir = f"/tmp/work_{os.getpid()}"
    os.makedirs(work_dir, exist_ok=True)
    repo_url = f"https://{GITHUB_TOKEN}@github.com/{repo}.git"
    result = subprocess.run([
        "git", "clone", repo_url, "repo"
    ], cwd=work_dir)
    if result.returncode != 0:
        shutil.rmtree(work_dir, ignore_errors=True)
        return None
    repo_path = os.path.join(work_dir, "repo")
    env = os.environ.copy()
    env["OPENAI_API_KEY"] = OPENAI_API_KEY
    codex_cmd = ["codex", "--full-auto", instruction]
    try:
        result = subprocess.run(
            codex_cmd, cwd=repo_path, env=env,
            capture_output=True, text=True, timeout=300
        )
    except Exception:
        shutil.rmtree(work_dir, ignore_errors=True)
        return None
    branch = "codex-fix-" + str(int(time.time()))
    subprocess.run(["git", "checkout", "-b", branch], cwd=repo_path)
    subprocess.run(["git", "add", "-A"], cwd=repo_path)
    subprocess.run([
        "git", "commit", "-m", f"Codex auto fix: {instruction[:50]}"
    ], cwd=repo_path)
    subprocess.run(["git", "push", "origin", branch], cwd=repo_path)
    pr_title = f"Codex Fix: {instruction[:50]}"
    pr_body = "This PR was automatically generated by Codex CLI."
    api_url = f"https://api.github.com/repos/{repo}/pulls"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    payload = {
        "title": pr_title,
        "head": branch,
        "base": "main",
        "body": pr_body
    }
    resp = requests.post(api_url, json=payload, headers=headers)
    pr_url = None
    if resp.status_code == 201:
        pr_url = resp.json().get("html_url")
    shutil.rmtree(work_dir, ignore_errors=True)
    return pr_url

@app.route("/slack/events", methods=["POST"])
def handle_slack_event():
    if not signing_verifier.is_valid_request(request.get_data(), request.headers):
        return ("Invalid request", 403)
    data = request.get_json()
    if data.get("type") == "url_verification":
        return jsonify({"challenge": data.get("challenge")})
    event = data.get("event", {})
    if event.get("type") == "app_mention":
        slack_client.reactions_add(
            channel=event["channel"], timestamp=event["ts"], name="speech_balloon"
        )
        pr_url = process_mention(event.get("text", ""))
        if pr_url:
            msg = (
                f"<@{event['user']}> 修正したコードのPRを作成しました: {pr_url}"
            )
            slack_client.chat_postMessage(
                channel=event["channel"], thread_ts=event["ts"], text=msg
            )
            slack_client.reactions_add(
                channel=event["channel"], timestamp=event["ts"], name="white_check_mark"
            )
        else:
            msg = f"<@{event['user']}> 指示の処理中にエラーが発生しました。"
            slack_client.chat_postMessage(
                channel=event["channel"], thread_ts=event["ts"], text=msg
            )
    return ("", 200)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))